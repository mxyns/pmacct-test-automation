name: runtest_all

on:
  workflow_dispatch:

jobs:
  ### Build Traffic Reproducer Images
  traf-repro-docker:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Framework
        uses: actions/checkout@v4
        with:
          path: pmacct-test-automation
          submodules: recursive

      - name: Create Traffic Reproducer Docker Images
        run: |
          sudo apt update
          sudo apt install docker
          cd pmacct-test-automation
          tools/pcap_player/build_docker_images.sh

      - name: Check Images and Save as Artifacts
        run: |
          echo "Checking Images..."
          docker images | grep _build
          echo
          echo "Saving images as artifacts..."
          mkdir -p /tmp/docker/
          docker save -o /tmp/docker/traffic_reproducer_docker_images.tar traffic-reproducer:_build traffic-reproducer-multi:_build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: traffic_reproducer_docker_images
          path: /tmp/docker

  ### Setup Framework and Run Tests
  pytest-runtests:
    needs: traf-repro-docker
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        test: ["1**",
               "2**",
               "3**",
               "4**",
               "5**",
               "9**"]

    steps:
      - name: Checkout Framework
        uses: actions/checkout@v4
        with:
          path: pmacct-test-automation
          submodules: recursive

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Framework Requirements
        run: |
          sudo apt update
          sudo apt install librdkafka-dev docker
          pip install --upgrade pip
          pip install -r pmacct-test-automation/requirements.txt
          docker-compose --env-file pmacct-test-automation/settings.conf -f pmacct-test-automation/library/sh/kafka_compose/docker-compose.yml pull

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: 'traffic_reproducer_docker_images'
          path: /tmp/docker

      - name: Download/import images in the local registry
        run: |
          docker load -i /tmp/docker/traffic_reproducer_docker_images.tar
          docker pull pmacct/nfacctd:bleeding-edge
          docker pull pmacct/pmbmpd:bleeding-edge
          docker pull pmacct/pmbgpd:bleeding-edge
          docker image tag pmacct/nfacctd:bleeding-edge nfacctd:_build
          docker image tag pmacct/pmbmpd:bleeding-edge pmbmpd:_build
          docker image tag pmacct/pmbgpd:bleeding-edge pmbgpd:_build
          echo "List Images"
          docker images | grep _build

      - name: Run the test
        run: |
          cd pmacct-test-automation
          sudo env PATH="$PATH" ./runtest.sh ${{ matrix.test }}

      - name: Prepare Results Folder for Upload (permissions and folder name)
        if: '!cancelled()'                            # always run this step, unless job manually cancelled
        run: |
          cd pmacct-test-automation
          sudo chown -R 1000:1000 results/
          sudo chmod -R 777 results/
          echo "Adjust results folder name (when : or * is used as part of ./runtest.sh argument...)"
          TEST_FOLDER_NAME=$( echo ${{ matrix.test }} | sed 's/\*/x/g' )
          TEST_FOLDER_NAME=$( echo $TEST_FOLDER_NAME | sed 's/\:/_/g' )
          echo "TEST_FOLDER_NAME=$TEST_FOLDER_NAME" >> "$GITHUB_ENV"

      - name: Upload Results Folder
        if: '!cancelled()'                            # always run this step, unless job manually cancelled
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: "test_results_${{ env.TEST_FOLDER_NAME }}"
          path: pmacct-test-automation/results

  # Expose Results as Artifacts
  pytest-results:
    if: '!cancelled()'                                # always run this job, unless job manually cancelled
    needs: pytest-runtests
    runs-on: ubuntu-22.04
    permissions:                                      # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
      pages: write                                    #  --> to deploy to Pages
      id-token: write                                 #  --> to verify the deployment originates from an appropriate source
    steps:
      - name: Download Results Folder
        uses: actions/download-artifact@v4
        with:
          pattern: test_results_*
          path: results

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Requirements
        run: |
          pip install --upgrade pip
          pip install pytest-html-merger

      - name: Merge results (test logs, global logs, and reports) in a single folder
        run: |
          mkdir test_results_merged
          cat results/**/pytestlog.log > test_results_merged/pytestlog.log
          cat results/**/monitor.log > test_results_merged/monitor.log
          find results/**/* -maxdepth 0 -type d -exec cp -r {} test_results_merged/ \;
          mkdir tmp_html
          randomname() { head -c16 /dev/urandom | base64 | tr -dc a-zA-Z; }
          for f in results/**/report.html; do mv "$f" tmp_html/`randomname`.html; done
          array_of_assets_dirs=($(find results/**/assets -maxdepth 0 -type d))
          cp -R ${array_of_assets_dirs[0]} tmp_html
          pytest_html_merger -i tmp_html -o test_results_merged/report_merged.html
          cp -R tmp_html/assets test_results_merged

      - name: Upload Merged Results Folder
        uses: actions/upload-artifact@v4
        with:
          retention-days: 15
          name: test_results
          path: test_results_merged

      - name: Create folder to deploy to pages and fix permissions
        run: |
          mkdir github-pages
          cp -R test_results_merged/assets github-pages/index.html
          cp test_results_merged/report_merged.html github-pages
          chmod -c -R +rX github-pages | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done

      - name: Upload HTML report as github pages artifact (will be deployed by next job)
        uses: actions/upload-pages-artifact@v3
        with:
          path: github-pages/

  # Deploy HTML report with github pages
  pytest-html-report-deploy:
    if: '!cancelled()'                                # always run this job, unless job manually cancelled
    needs: pytest-results
    runs-on: ubuntu-22.04
    permissions:                                      # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
      pages: write                                    #  --> to deploy to Pages
      id-token: write                                 #  --> to verify the deployment originates from an appropriate source
    steps:
      - name: Deploy artifact to Github Pages
        uses: actions/deploy-pages@v4
        id: deployment

      - name: Add info to markdown summary
        run: |
          echo "# :loudspeaker: Pytest Quick Report: :loudspeaker:" >> $GITHUB_STEP_SUMMARY
          echo "ADD SOME SMALL SUMMARY HERE (nr of test failes, passed, etc..) --> e.g. take small summary output (that when test are failing is in the log, and pipe it together here)"
